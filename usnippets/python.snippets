global !p
def complete(t, options):
	if t:
		opts = [m[len(t):] for m in opts if m.startswith(t)]
	if len(opts) == 1:
		return opts[0]
	return '(' + '|'.join(opts) + ')'
endglobal

snippet #!
	#!/usr/bin/env python
endsnippet

snippet imp "import"
	import ${1:module}
endsnippet

snippet from "from _ import _"
from ${1:module} import ${2:things}
endsnippet

snippet def "Function definition"
def ${1:name}(${2:arguments}):
	""" ${3:Docstring} """
	${4:Code...}
	return $0
endsnippet

snippet class "Class definition"
class ${1:ClassName}(${2:object}):
	""" ${3:Docstring} """
	def __init__(self$4):
		`!p
if t[2] != 'object':
	snip.rv = 'super({}, self).__init__()'.format(t[1])
if t[4]:
	indented = False
	for arg in t[4].strip(',').split(','):
		if not snip.rv:
			snip.rv = 'self.{a} = {a}'.format(a=arg.strip())
		else:
			if not indented:
				snip >> 2
				indented = True
			snip += 'self.{a} = {a}'.format(a=arg.strip())`
	$0
endsnippet

snippet if "if"
if ${1:condition}:
	${2:code...}
$0
endsnippet

snippet el "else"
else:
	${1:code...}
$0
endsnippet

snippet ei "elif"
elif ${1:condition}:
	${2:code...}
$0
endsnippet

snippet try "try/except"
try:
	${1:VISUAL:pass}
except ${2:Exception}:
	${3:pass}
endsnippet

snippet ifmain "if __name__ == '__main__'"
if __name__ == '__main__':
	${1:main()}$0
endsnippet

snippet _ "__magic__" b
__${1:init}__${2}
endsnippet

snippet "\"" "Docstring"
""" ${1:Docstring} """
endsnippet
